name: memory_leak

on: [push]

jobs:
  check_memory_leak:
    runs-on: ubuntu-latest

    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: load dependecy
      run : sudo apt-get update && sudo apt-get install valgrind -y
    
    - name: show dependency
      run: |
          echo "gcc path: $(which gcc)"
          echo "gcc version: $(gcc --version)"

    - name: create dependency directory(obj, out)
      run: |
          mkdir ${{ github.workspace }}/obj 
          mkdir ${{ github.workspace }}/out 

    - name: build Router
      run: ./sh/test.sh -b

		- name: check memory leak
			run: |
				fault_files=""
				leaks_files=""
				for testcase in $(ls -1 "$case_dir"/* | sort -V); do
						testname=$(basename "$testcase")
						testnum=$(echo "$testname" | sed 's/^test0*\([0-9]*\)\.txt$/\1/')
						valgrind --leak-check=full --log-file="$log_path" ./router "$testcase" "$out_dir/$testname" >/dev/null 2>&1
						if [ $? -ne 0 ]; then
								fault_files="$fault_files$testnum, "
						elif grep -q "ERROR SUMMARY: 0 errors" "$log_path"; then
								echo "./$out_dir/$testname No memory leaks detected"
						else
								echo "./$out_dir/$testname Memory leaks detected!"
								leaks_files="$leaks_files$i, "
						fi
				done
				if [ -n "$fault_files" ]; then
						echo "Fault at test{$fault_files}"
				fi
				if [ -n "$leaks_files" ]; then
						echo "Memory leak at test{$leaks_files}.txt"
						exit 1
				fi

    - name: delete dependency directory(obj, out)
      run: |
          rm -rf ${{ github.workspace }}/obj 
          rm -rf ${{ github.workspace }}/out 
  
